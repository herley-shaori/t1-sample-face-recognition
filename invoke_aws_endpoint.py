import base64
import boto3
import pandas as pd

ENDPOINT_NAME = 'https://runtime.sagemaker.ap-southeast-1.amazonaws.com/endpoints/byom/invocations'
runtime= boto3.client('runtime.sagemaker')

with open("cropped_images/David_Beckham_0001.jpg", "rb") as image_file:
    img = base64.b64encode(image_file.read())
payload = bytes(img)
with open('encode.bin', "wb") as file:
    file.write(payload)

payload = '''
/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAIBAQEBAQIBAQECAgICAgQDAgICAgUEBAMEBgUGBgYFBgYGBwkIBgcJBwYGCAsICQoKCgoKBggLDAsKDAkKCgr/2wBDAQICAgICAgUDAwUKBwYHCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgr/wAARCACDAIMDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwDwv9lL9iX9kz4i/sJ+CPip4r+Bbav4v1kaib/U28QahCswi1K6hj/dxXCxriONF4UZ25OSSTz3iD9jn9lPwTLNL4m+Hgklc4g06DVr0GP3J8/J7V6T+wv4+S2/Yj+HHhS30l7q7EupRwMkmBEG1S6Ykj0+arnxa0G3m8XQ6NPdI9wQrXNwTznuP519/wCK/ip4qZd4pZ/hcJn2Np0qeNxUYQhiq8YwjGvUUYxiqiUYxSSSSSSVkrHp5JluV1MvoOpQg24xu3GLey8jybQ/2IP2ePExjnsvhxLHC7D7mrXZJ9hmY1614X/4JbfsuazZRm4+FEiyMMlzr18Cfw86vV/hL4N0ifTY2AOIgMHH3q9i0mK1trRHSAAKowuK/M5eNHjCp/8AJR4//wALMR/8sPuqHDOQ1IX+q0//AACP+R8m67/wSW/ZvgiMmnfDZ19M63en+c1cZP8A8Eu/gy1y9rbeBQHBztOrXfAHXnza+2dS1x4y7iVyB0BNZdpf2N/IftEAbLc4GD+dZS8afGHm04kx/wD4WYj/AOWHpw4V4dlB/wCyU/8AwXH/ACPgvxn/AMEzvBeizCfTvDEjQsPuLfzkj8d9efeJP2FvDFoT/Y2nXTEcENJIcH/vqv1GudP025UOLVCSMEsM8e9UJPBXh65Uk6ZbBQckKgGa6YeN3i9BWfEWOf8A3N4j/wCWGE+Ecgv/ALrT/wDAI/5H5x/C/wD4JpL4rcNq9g+xjkETyLx+dep6b/wSI8CGJ5bvRJGAHBa/nH4cPX2jY6ZoOjwZtLJFI9AK1dN16FodkhwMdKzqeOHjDbTiHHf+FeI/+WGtLg/h7/oEpv8A7cj/AJHwxL/wSu+ElpAHuPB8vJI3NqdzkY+knesO5/4JwfCeK7EVr4EMg/uyahd4P5SivvfxPqeli1KJGScc4rjL/UbMIZFiCtngnrXJLxw8ZL/8lHj/APwrxH/yw63wdw9KOmDp/wDgEf8AI+OL/wD4JsfDKSHzE8GrbHPSK/u2x9d0prE1L9hj4G6TaMs/hCQzkHYX1K5xkfSSvuS2X7ZZySSBR8nTFeZfEXw8LlGkVT8pyCB6c/0rSHjX4xt68R4//wALMR/8sPMr8J5DTTawlP8A8Aj/AJHzd4Q/Yp/Z41bSrlL3wGXu0f8Ac7tWu1OPoJcV6j8MP2F/2HdR8P2Eni34Gia6+2eXeN/wkmpKWXOM4W5AH4UadcQ2viBzaHGZdyqfc4/rXf6JcXTT22qWSE7J9l1CPU85rs/4jJ4xP/mo8f8A+FmI/wDlh8jjcmyiEnbD01/25H/I/Or/AIKCfCn4efBH9rzxf8MfhTo40/w/prWLabZi6lm8tZbC3mb55WZ2y8jHljjOBwAKK1v+CnaKn7cHjRVOR5WlEfjpVpRX+4nhNjMZmPhXkOLxdSVSrUwWFlOc25SnKVCm5SlJtuUpNtttttttu5+I5nCEMyrRirJTkklsld7H2r+wMmk6B+wV4J8XXVooljh1QrKf4sandgD9K898S+ObjUPGc/iK9kwJJiEGe1L+z34zvx+wP8PPBmm3jQ/6PqjysR8vOq3n9K5z4r6rpWm6do1rY3UUkwYebKO5Nf4k+Mf/ACd7iJf9R2L/APUiofs2Qq+W4f8AwR/JH1l8A/EL6loyJC33gO/tXrK6v/Z8XlyKWA7ivFf2WNKvH8HxagW5KgjHTGK9cgS7mH7yPoOK/H8Sp81kfp+WcvJqVdUvzPuaOIgN7Vn2bXEZJSN8+mK2m0q5eYLNHsDdiK0LPRLWF1Z2FcThUvufRUVT5dDG0y4vbxSsscigcYJq7/Zd4igRBsHnk10a6XaRooVMA/xAVeS1tCiRoQSemKpU53vcxm4t6I4mTTb4qULn86jh0u4hTLyEfjXa3ehqx3OoxntVS606zCFCR0q7SlEKdR3tY4LVXaPcDMSR6msFnN1KTL0B613esaJaIcrg561z9/oFupzFwCeRiuNxk5HZBtoqQzRiHyQCQRgYrm/iHZLDpckxbYAnpXXfYEtk24xxnpXLfEUyR6NdrNEX3QEqB16V0UozlLQ8fMZuEXofN0k02m+MJXjuGbdHlRu/usG/pXt3w+8Y6DofiS3t7iFWimcGUN06D/69fIvxL8e32k+LPtOnXTR+Xkcdcg8j8uPxr2D9lfVH+LFvBC2pItyTjL4JY9q91Uansee6PzrHTlUqM+Wv+Cps1ncft3eOLjT3Bhkj0loyvTB0qzOKKpf8FK9C1Hwz+2p4x0LVTm4t4tLWQkYznS7Qj9CKK/378Gbrwf4c/wCwDB/+o9M/Ac3/AORriP8AHP8A9KZ9Nfsc23hXxL+xv4R0+R5TqNguoCSBmwrodQuGBH/fVcj8VdC0xviFo+iRzK8YlXdEB6sKyvh74T8ffDL9lD4UfGfws032PXrHVIbpd3ylk1a8i4/BOau6VZ6hq3xU0efVSS8tzGyg/gT/ADr/ABX8Yoxj4vcRO/8AzHYv/wBSKh+35LhKv9j4WqtnCN/uR9+/CXwZF4Y8DWdrBEVEkCNn0BFdFe694V8M2rS398oZG7tirWmtHY+E7eUudn2IKgHYha+cPjN/aF9HdGSacYcn75A/SvyKr/E0Pu8PNxhdHrmt/G/webgxxX0QA4BMlMt/inpd3g296hB/2hXwV8QvijZeFLlhqWuxRCNjwJ8sf1rzi+/bD1+a+XTdDuLh8y7Y2iVya1+pSqamsc2nS91n6t6f8RIZYlV5EIHbcOatS/EDSYctJMFJHAB5r82vhf8AtMfEBtSK6tqc4jjxmN3PmMfTFfTnwp8Zaz8RRHLFHknHyc7hXLWouG56+Hre0R9Bv8SAkQVn47MTWdd+P43BdrhFGehavOvHdv4q0Gy+1ONkKDLBs5r5f+OXxy8dW0klto+rGAIeNtc9Fe0nymlSSoxcj7MvPiPpnmMJNTiGBzl+lU/+FreFy5VtShYhucOK/MXxJ8dvirYPH/bV3fn7SCYHwyqV/rWz4A+LfiDX7R7i78UtBAjhpnO8FCPc9a9P+zLxueJUzqSqcp+mdr4z8M644tIbyNZCOUZx09qg1HTYtThdGdHRlKL0r468AXWua6kOqReNmuInIMM0D/e9jivqn4O3csukLZ6pcebIQPm54rmjTVCdi6uIdeOp8SftpeD7rwf40uLa3jCo2GhCLyWJOf6V6z+xl8PNOsxpusNqc2nkxrLmP7zcZxVP/goVoefH2lxWtsHkuIvMVlB42kA/pmvZf+CSX7OOp/Hb4n3Fz4y1uQaJotuJDBGQGbaNoH0r1oUp1qLSZ8liqT5ZVF0PgT/gqlrX/CQ/t4eN9W+0rN5kOkL5itndt0mzT8/l596K6X/gth4K0D4d/wDBTj4meDvC9osFhZnRvIiXoN+i2Ln82Yn8aK/308G4On4Q8OwfTA4Rf+W9M/nnNXzZpXf9+X/pTPov4L+HdS8af8EnPhlaMY5lsb3VEs4lB3pv1e9LZ5x1JNYFz8OdR0v42eDrO5RmVHhE+0DA+XP9K+uv2BfgvB4z/wCCGPw28RaVo0LXscusztMjfvHKa/fryOv3QB+Fc78QfhDa6C2k/EC5ika4nliPyp/qyG79+9f4p+NNOWH8XeIZPrjsW/vr1D+leFKmHr8I4eHVRj+SPWL/AEtptJhtreYIEi7+leRfFL4Ia740t5bG018WySk7nHp6V7BLcqkMUrS71ZAVx0xVS+urRnMcsQz2wa/Hq0uWpzI+lwuFjVgmfIt1/wAE3Pg5LJLf+NNXuL29ckjHY/XtWFY/sJfA7wbfNqehrNJcW03mRCf5gBX2FeaPaXe4G0yrDklaxZfCHhtmaF4RlvbNelhszhCNmhVMni5XPkq5/Zp8L3fiD+0rNJhcOcF449q17t+zJ4SXwv4mGlpBuQgfOVzn8a9As/BOgWytAbdSdvy8Vp+BPCttpGvpcQx7T2GK48ViFV22O7D4V0JK5l/tF2F7H4WnMcORjAGMd6+XPHnwM8O61Yx6nqunSB5BlvLUnjvwK+x/inZrrXh27juFzs7V51odpYS2EVjdWiSL2JFcmHmqVW7O7E0YVYrzPnCx/Zv+Gmui0h1zTJZFtkKxu4IKgknpW3o/7JHwul0650KC0Rba5YeYGJ3MMjgV9B3PgTR5M3KWI3kcACpbHwjoZjUXVgpZTlSDggjpXqVMxXLoeHLJoupzJHg/gT9je28C6kJvh/r1x9m+89rMeIx/+qvdPhv4Mj8NBGvJWYsNvPc/5NdBZaYNNgPlliZPvMFwfpTZ7m4jlW1ihBckBR269R715ft51KmxdbCRp0U30Pnv9rDQ31/4x6Lb20BO6GQcjjjmvVv2WdXu/ht8JfEWoeH/ABZpnhO4QiKXULgFeWBJyACeufzrL8ReDZPiJ4/XWrCc50i23SNjOTkKVx61b+LHwTtj+zpe+Lde0S+v7SbXF8u107guPLXG7noDu/OveyznqV0meHmEKNHKaj7n5gf8FBNdv/E37Xni/XNT8THWZrhrEtqZ3f6QBYW4Vhu5xtAA9gKKwf2tZ47j9oDXWh0w2SJHZRpbE5MapZwIB+Qz+NFf79+Eqt4V5Cv+oLC/+mKZ/LuZ/wDIyrf45fmz9g/+CSXxl+Mumf8ABMD4f/DHwj4as7jTXi1g/aZ5OcPrF8WGPqTW58fb3xFbeCNT0WXTw8cKKsU8WW8l2cDPtyRXNf8ABMTX9T8Ef8EoPhxrNzoMklpcxa00V0g+7t1q/B7ddw/SvOviz+15f+Hrm50DR9dtxaakP9JiEo8zAYOcnHYj9K/xQ8apNeL+fpr/AJjcX/6fqH7XwxiJUcroxvo4x/JHo/ww8bv4o+HdhNcTFb2yzBdxuSDuDcH8q622Vb4i4M4wAc/WvE/2b/iJaeNfBmpa/YxPFLHqZSVZMfMAPvD2J5r0GbxcLG2CKmwMchi/XP8A9fNfi+MpctW5+o5ZiYqJ3CXOnC3MazgEnk5qGX+x4lLyujkdT6V5xN40ZLdmR8EdAe9clr/xfxI2m6dMzy9GCnoazjS9o9z6VVIXuz1a68TaKmtpaWlwrtnlR6V1mlfZ5byO7tkyT1IHQV4r8M9Gu7/xVFcarceWJYSyNIwAzivaPCniTwZoentHc6xCbhhh18wHBzWvsJrRGFWpGU7IPGVm99pctsg/1i4PvXj+s+IrDwRcJa38W3EmCxr1/wATeOvB2nWyIL9WcnJORivK/Hl74G8avNaQ6pbPOWzhXBxS+r1L3ZdSUeVG/oni/Rb8oLSdWZ1+73rSiNg94IEnXzAcsh6gV41r9lrvgWWPVNNjE1syhTsPKD1rX8LfFbSNRgy98PM7gn5iaipGKWhVKrTtqexvd2skDW5uBlFyMc8VyHiXxELNJ75ZSstspeNj6Cufs/iEu4lbmMFjt61jePb+XxBoE1jBe+XLP8scyH7pbiqw0FzXZ4mbYunDS5pfs++LpPEF5LY2NoZb3VbssQnzeXuY/KT+OPwr7K+IXwO8T+K/gNpvgC30W7sZoJPNuP7LkZZJifUqc4/xr5i/Z4+EvjHRbLSdE0u4tbFoTvl1tcZlbcSCfwwPwr7F+HfiLW9H1uLw54g+K9veSSgKBY3G5z7cdK+jwNa1dcqPz3Nca1hpQvdH89n/AAVC+HV/8J/26fHXgHVLWSGexbTWeOU5YCXTbWUZPrhwfxor0b/gvnDHB/wVm+KscTuy+XoBDSHJOdA0480V/vr4Su/hVkD/AOoLC/8Apimfz3mD5sfVf96X5s/Yf/ghh4S8NeNP+CM3wq0fxHogvI2j1/CsOP8AkP6lUPxa/ZY/Y6HiK8sNZ+G+lR3ptpFNxKVDK+D04+lbf/BAJXg/4I//AAiuZCSh/t/ABA/5mDUepJFbf7eH7PXgv4n2R8Q2HxLs9Bu1jHP2uNcMD+tf44eM2HhV8U8+cVr9dxX/AKfmfo2SV5qhRj/dj+SPgDwPpmieDNS1nR9Ht0hsxqUqpFE2QdrYHNdDp9i+uyoPOMkQPCt25PFZFp8PZ/h9p+pW03iYaqy35Z7xEG1xnr1q/wCHNVisr+zWNpHjllz14xX4FmEW6nKfr+XScIJnL/F+fWPDtwui6dcFbufGAv8ACnrXMfD3XfBWnao0eozGS4QESFh1bNdf8bPAt94o12fUZ52hUQ/I0ZOcAcYxXkVjovgfTEL6xrV/bRw5Mk5tiec85I61wYfn5uVH03tJtKx6J8UPjHZwWEUfhsv5yx7f3RwV615DafFDxR4M8TT6rql/cTRSKHC5PB/Gun1LxZ8D7SxW4TxKsj4wrSKB+dc1fW/w28T3qXa+MPLjZMfvTuQCvUWHxNO1kJxxcn7qLPjD9ofxVfafLZ6fE8n2sYt3dsbVI6/rWN8LbzxN4X1L+1/EWutcvcnds38BTWlrEPwqsILK6n8fWGbUfMkbLyP8iqEXxJ+Ccdyls2szz7MhfIiLE5OegrSpTr8tmifZ4yLvI9oHxy0m1sorS52zZO0ozA5GK51r7wL4u1JovDmo/YNQ5YojnH/1q4fTNPHxM1ZrT4e+DtQcqeLm5gaNQPXJFeq/Cf8AZ+1HSr4694ntIorlGBzu6449K8uqvZfEROVboQ+CYtbhtnj12MF7aUgszk7/AHroNFuJPE840H7QkHnzDy3YdCOa0vF+l2VrOBbbQGbLEN3r0X9jf9k/xD8drK/8U2q7YdOuGKZHUgMK2y+hVxlWyPm87xChT1Nv4WeFvEelLaeFjq/nPqDYhPmcDnFfcf7OX7MPhL4cwweKNZ0/7Zq0gDbpBnaSOtfl3afHTxh4M/be0H4S6ufKhsdYERy2MjIr9otCupH0i0uoAo3RpwPQrX3eAyyVB800fnmZYhTgrdT+ar/g4NVk/wCCvXxcV8Z/4kH3Rx/yANOopf8Ag4QYv/wV8+LjHuPD/wD6j+m0V/uv4Tf8mryH/sCwv/pimfkGO0xtX/FL82aP7GX7T3/BSj4lfBfwl+x1+yPoGs3Gl6F9qjgm0+0cIv2i9nuXZpAMHDzt9MV+inwl/wCCW/iL4HfDO4/ab/4KL/H3XtWutN09p4/Dx1J2hV/4V27uuc17f/wbmfD/AMJaV/wSm+GPxBt9At01LUJNb+13kcP72YrrmoRrk45wqqv0ArC/4Lb+L9a8Q+Ifh/8As56PPPHaatcS3usFMDMMKjKnA7llH41/jv4xtYXxNz+XfG4r/wBPzP0zIMP9ajQgv5Y/kj5f1HxRpfjvw6fEPhrR3sdKvJ2NjaFSpEOflYj3rhoNUbT52g+18wbvLFehX+nNovh63062UbYYyqR4IMKj7qkfSvG/F+601X7XbsRtfMi5r+fK0lWxGh+0ywawmGikeo+DvGul+IIrfSNTVZZoxtZz3rrb74VeDrzTHhOh2zfaOWWWIMpz65FeI+B9T0681pb+zl2uhBZByfevorw1qH9o6HFdB1ZivyhhyPSvPlGpSq6M68LiFKyPC/iF+zL8Kbq3azl8O2au4wFCAc/QcV5lD+yN8NtL81df064aEvwqSEqo9ABxX1H4z8Hvq0LTEMJMZ3qD1rxP4nzeOPBUaIttJLaM2ZG6kV7OGx8qSV9T2Y1vZQbRxsn7O3wO0ZkTwj4Jea4/vMgAHrmtnSfgn4dtJ45pNGggbPC7BxXI3HxZ8ZyXS22laaQ7PtQkc4r17wF4c8T3+lQ3nijcjSAMuavEZjJbKxMcVOpozvvhp4Z03QrZIYbaMZX7wFJ8TfFlvpumrKlth4s5CtgtW14d0hbTTFnkcgxrz715h8a9bsbpZf8ASQoiyQSe9fPSqzr1NTgxdb2aZxXiXxld6tdQ/YnKm4GwR5G5c9+eDX6j/wDBNjwpL4L/AGZ4ZNcszbyXW55ZHxh0xncSOMV+Sng6UeKPEaJeAtBbscqDyxB4NfQ/h79qL40eA/C1x4K0zXGutHlgMbWm8gxxkYI+v+FfR5TVpYSpdnw+e06lWnzHiv7XWt6db/8ABSyHVvDl6LhE16Lc0fIBL5OCO31r91vhiLrWPA+kXry4E2nRuWB4Hyivx8/ZJ+CP7K6fH6z+KHxQ8SajPm586e0vMuqyZyBuPav2O+HXj74ceLNBt18A6/a3FtGFWGGBwTGmOBj/AD0r7v8AtTC14qMXqfEY2LdGOnU/mv8A+Dg9Sv8AwV6+LYLZ+Xw+c/8Acv6bRUn/AAcMrCn/AAWD+LyQH5VHh8D/AMJ/Tc/rRX+4fhO0/CzIX/1BYX/0xTPyfML/AF+r/il+bP2s/wCDd+Nn/wCCOPwkByBs8Q4YEjDf8JBqRH8q5D/gpVo39p/tHWPiC9U503w62x89d7IrYPb5ip/Cu3/4N013/wDBHH4RRFcq3/CQEnuCPEGpf41H/wAFR/Di2fijS9bVcRzRrbOx7gsD/PFf45+Oif8AxEbPWv8AoMxX/p6Z+q8ITSqUL9o/kj418SzOA0jpkqoViP4jyQSf0/CvH/H9kDK8sQwzZyPevW/FUsSPuEnLfKwB9On9a888W2sDqbkjkDBANfzepSVXQ/f61OGIwySWqR5lp+szeFb/APtiyfJiPzRA/er3X4S/FvSdb05JY7tYpSw3xk9K8M1izhkutyIq4f7xrH8RWPibwxbN4g8LszOi7jFF/F3ruqRjUV0fO1Kc6E+Y+4dO8TaJfLJbzzKTtyK5Px/caZd6ZIZNPWdcYwVBr468Kftx3theDQfGTCwMUWD5oIOVH/1q3fEP7bek3+n3FpaXw2GI7XY8k9amFObloehTzOhGlaoj0Lxb8PtKt2g1bT/KVw2/aCoxz0r1f4da7YXOjw/bY1faoAD9civiXWf2udOU2m/VlJDAuC/X1rrtL/bP0m2sAI70EeX8uw4rath6r3IhnGFvofXXxH8cWUOmNBpUkUaiP52LYxXyP8T/ABjeeJdam0rR7tpE80CSTPHviuP8QfHvx/8AFXVV0mzEtvpicGdfldx71t6Dppt4RbDnYOZO9clSnGlG9jj5quMq36HoPwl0S4OqWmmwQAG7dYll68scZr0nxh4M1b4UeOrvwH4lR/NijinjLcb43zg/pXE/Bm4+zeOdAtwS0Z1O3z68yDP6V9Zf8FU/CNvofjrwp4+0+EIdS0SOBiq8N5eMfzrvw9P22Gc10PC4hqxo1/ZLsfM+sWSaLepeQSERH5xg98/zrsfCPxi+JHw4hj1zwP4ruY3TD+VFIcLjuw/GuQt5jqFiqXgDN125qPSdcg0XUm025UeTP8pz0Fc1OVZPmR8ryJo+Fv8Agph8SvEvxf8A22fGnxE8X3fn6lqCaZ9qm/vmPTLSIH/vlBRWR+3rEsP7WPitFYEf6AVI9DYW5FFf9A3g3Jz8IeHZPrgcJ/6j0z8XzRWzOuv78v8A0pnof7OP/BaH/gpb+yT8HNI+AH7Pn7SX/CP+EdBNwdJ0n/hDtGu/I8+4kuJf3tzZyStullkb5nON2BgAATfFf/gtj/wU3+N9tFZ/FH9pcapHCwMQ/wCEL0WEqQcjmKzU0UV347ww8NczxFTEYzJMJVqVJOU5Tw1GUpSk7ylJyg3KTbbbd227szpZhj6DTp1ZRttaTVvSzPP7r/god+2HenN18YCx3bv+QBp45/C3qncft3ftWXSbJ/ipuB7f2HYj/wBoUUV5n/EFvBy//JN4D/wjw/8A8rPSXFHEyVljq3/g2f8A8kZs37YP7Rdw2+b4hgnP/QIsx/7RqWL9s79pSAYi+I4A9P7Fsj/7Rooqv+IMeD3/AETmA/8ACPD/APysmXEvEct8bVf/AHEn/mcn4v8Ai3498eT/AGrxVq8F1IRzINNt4z+aRisUa3qwhFuL+QIBwobFFFUvBvwhW3DuB/8ACTD/APysxee53LfFVP8AwOX+ZVlZ55BLLK7MOh8w8frWlpni/wARaOVNhqAG05XzIUkx/wB9g0UU34O+Eb34ewP/AISYf/5WSs6zlbYmp/4HL/M6Oz/aI+MGngLZeLEjA6bdMtv/AI3VyH9qb47wf6rx1jj/AKBdqf8A2lRRUPwY8Hpb8OYD/wAI8P8A/KzaPEfEMPhxlVf9xJ/5mho/7Z/7SugX0GpaR8SfJmtpRJC/9jWbbWHQ4aEg/jXdfFv/AIKyf8FAPjrpunaR8VPj2NVt9JQpp6f8IppMHlKcZGYbVC3QdSaKKuPg54RQjyx4ewKX/YJh/wD5WYVc6zivLmq4mpJ93OT/ADZxUX7bv7UEClIvieQD2/sayP8A7RqK9/bP/aV1Ag3nxJ3kdD/Y9mP5Q0UVK8GvCBbcO4D/AMJMP/8AKyP7VzT/AJ/z/wDApf5nCeOPHHin4j+J7nxn401U3upXYjFxcmFI94SNY1+VAFGERRwO3rRRRX6BgsFg8uwdPCYSnGnSpxUIQglGMIxSUYxiklGMUkkkkkkklY4pznUm5Sd29W3u2f/Z
'''

# file = open('encode.bin', 'rb')
# byte = file.read()
# file.close()
# decodeit = open('hello_level.jpeg', 'wb')
# decodeit.write(base64.b64decode((byte)))
# decodeit.close()

try:
    response = runtime.invoke_endpoint(
        EndpointName='byom',
        ContentType='text/csv',
        Body=pd.DataFrame([{'data':payload}]).to_csv(header=False, index=False).encode("utf-8")
    )
    predictions = response['Body'].read().decode('utf-8')
    print(predictions)
except Exception as e:
    print("Inference Error:")
    print(e)
